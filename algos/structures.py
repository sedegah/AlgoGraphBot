def bfs_description():
    return (
        "ðŸ“˜ BFS (Breadth-First Search)\n\n"
        "â†’ Starts at a node and explores all neighbors level by level.\n"
        "â†’ Uses a queue to track nodes.\n"
        "â†’ Good for finding shortest paths in unweighted graphs."
    )


def dfs_description():
    return (
        "ðŸ“˜ DFS (Depth-First Search)\n\n"
        "â†’ Starts at a node and explores as far as possible along each branch before backtracking.\n"
        "â†’ Can be implemented using a stack or recursion.\n"
        "â†’ Useful for topological sorting and cycle detection."
    )


def stack_description():
    return (
        "ðŸ“˜ Stack (Last-In, First-Out)\n\n"
        "â†’ Supports Push, Pop, and Peek operations.\n"
        "â†’ Think of a stack of books or plates.\n"
        "â†’ Last item pushed is the first one popped."
    )


def queue_description():
    return (
        "ðŸ“˜ Queue (First-In, First-Out)\n\n"
        "â†’ Supports Enqueue (add) and Dequeue (remove) operations.\n"
        "â†’ First item inserted is the first to be removed.\n"
        "â†’ Like a queue at the bank or bus station."
    )


def tree_description():
    return (
        "ðŸ“˜ Tree Data Structure\n\n"
        "â†’ A hierarchical structure with a root node.\n"
        "â†’ Nodes may have child nodes (branches and leaves).\n"
        "â†’ Common types: Binary Tree, Binary Search Tree (BST), AVL Tree."
    )


def graph_description():
    return (
        "ðŸ“˜ Graph\n\n"
        "â†’ A collection of nodes (vertices) connected by edges.\n"
        "â†’ Can be directed or undirected.\n"
        "â†’ Represented using adjacency lists or adjacency matrices.\n"
        "â†’ Used in networking, maps, social media, etc."
    )


def hashtable_description():
    return (
        "ðŸ“˜ Hash Table\n\n"
        "â†’ Stores data in key-value pairs.\n"
        "â†’ Uses a hash function for fast indexing and lookup.\n"
        "â†’ Basis for dictionaries/maps in many programming languages."
    )
